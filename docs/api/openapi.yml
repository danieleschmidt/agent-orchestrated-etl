openapi: 3.0.3
info:
  title: Agent-Orchestrated-ETL API
  description: |
    API for the Agent-Orchestrated-ETL system that combines Apache Airflow 
    with LangChain agents for intelligent data pipeline orchestration.
    
    ## Authentication
    This API uses JWT Bearer token authentication. Include the token in the 
    Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    
    ## Rate Limiting
    API requests are limited to 100 requests per minute per client.
    
    ## Error Handling
    The API returns standard HTTP status codes and error responses in JSON format.
  version: 0.0.1
  contact:
    name: Terragon Labs
    email: support@terragon-labs.com
    url: https://terragon-labs.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8793
    description: Development server
  - url: https://api.agent-etl.terragon-labs.com
    description: Production server

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        uptime_seconds:
          type: number
        checks:
          type: object
          additionalProperties: true

    Pipeline:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        source:
          type: string
          description: Data source URI
        destination:
          type: string
          description: Data destination URI
        transformations:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [pending, running, completed, failed, cancelled]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties: true

    PipelineExecution:
      type: object
      properties:
        id:
          type: string
          format: uuid
        pipeline_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, running, completed, failed, cancelled]
        started_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        duration_seconds:
          type: number
        records_processed:
          type: integer
        bytes_processed:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              timestamp:
                type: string
                format: date-time
              severity:
                type: string
                enum: [info, warning, error, critical]

    Agent:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [orchestrator, extraction, transformation, loading, monitor]
        status:
          type: string
          enum: [active, inactive, error]
        capabilities:
          type: array
          items:
            type: string
        current_tasks:
          type: integer
        max_tasks:
          type: integer
        last_heartbeat:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: string
        timestamp:
          type: string
          format: date-time

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the application and its dependencies
      operationId: getHealth
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /ready:
    get:
      summary: Readiness check endpoint
      description: Returns whether the service is ready to accept requests
      operationId: getReadiness
      security: []
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ready
                  message:
                    type: string
        '503':
          description: Service is not ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /metrics:
    get:
      summary: Prometheus metrics endpoint
      description: Returns metrics in Prometheus format
      operationId: getMetrics
      security: []
      parameters:
        - name: format
          in: query
          description: Output format
          schema:
            type: string
            enum: [prometheus, json]
            default: prometheus
      responses:
        '200':
          description: Metrics data
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: object

  /version:
    get:
      summary: Version information
      description: Returns version and build information
      operationId: getVersion
      security: []
      responses:
        '200':
          description: Version information
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                  service:
                    type: string
                  build_date:
                    type: string

  /pipelines:
    get:
      summary: List pipelines
      description: Get a list of all pipelines
      operationId: listPipelines
      parameters:
        - name: status
          in: query
          description: Filter by pipeline status
          schema:
            type: string
            enum: [pending, running, completed, failed, cancelled]
        - name: limit
          in: query
          description: Maximum number of results
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of pipelines
          content:
            application/json:
              schema:
                type: object
                properties:
                  pipelines:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pipeline'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer

    post:
      summary: Create pipeline
      description: Create a new data pipeline
      operationId: createPipeline
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - source
              properties:
                name:
                  type: string
                source:
                  type: string
                destination:
                  type: string
                transformations:
                  type: array
                  items:
                    type: string
                schedule:
                  type: string
                  description: Cron expression for scheduling
                metadata:
                  type: object
                  additionalProperties: true
      responses:
        '201':
          description: Pipeline created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pipelines/{pipelineId}:
    get:
      summary: Get pipeline details
      description: Get details of a specific pipeline
      operationId: getPipeline
      parameters:
        - name: pipelineId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Pipeline details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
        '404':
          description: Pipeline not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update pipeline
      description: Update an existing pipeline
      operationId: updatePipeline
      parameters:
        - name: pipelineId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                source:
                  type: string
                destination:
                  type: string
                transformations:
                  type: array
                  items:
                    type: string
                schedule:
                  type: string
                metadata:
                  type: object
                  additionalProperties: true
      responses:
        '200':
          description: Pipeline updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
        '404':
          description: Pipeline not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete pipeline
      description: Delete a specific pipeline
      operationId: deletePipeline
      parameters:
        - name: pipelineId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Pipeline deleted successfully
        '404':
          description: Pipeline not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pipelines/{pipelineId}/execute:
    post:
      summary: Execute pipeline
      description: Start execution of a specific pipeline
      operationId: executePipeline
      parameters:
        - name: pipelineId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                parameters:
                  type: object
                  additionalProperties: true
                async:
                  type: boolean
                  default: true
      responses:
        '202':
          description: Pipeline execution started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineExecution'
        '404':
          description: Pipeline not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pipelines/{pipelineId}/executions:
    get:
      summary: List pipeline executions
      description: Get execution history for a specific pipeline
      operationId: listPipelineExecutions
      parameters:
        - name: pipelineId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, running, completed, failed, cancelled]
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: List of pipeline executions
          content:
            application/json:
              schema:
                type: object
                properties:
                  executions:
                    type: array
                    items:
                      $ref: '#/components/schemas/PipelineExecution'

  /executions/{executionId}:
    get:
      summary: Get execution details
      description: Get details of a specific pipeline execution
      operationId: getExecution
      parameters:
        - name: executionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Execution details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineExecution'
        '404':
          description: Execution not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /executions/{executionId}/cancel:
    post:
      summary: Cancel execution
      description: Cancel a running pipeline execution
      operationId: cancelExecution
      parameters:
        - name: executionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Execution cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineExecution'
        '404':
          description: Execution not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /agents:
    get:
      summary: List agents
      description: Get a list of all agents in the system
      operationId: listAgents
      responses:
        '200':
          description: List of agents
          content:
            application/json:
              schema:
                type: object
                properties:
                  agents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Agent'

  /agents/{agentId}:
    get:
      summary: Get agent details
      description: Get details of a specific agent
      operationId: getAgent
      parameters:
        - name: agentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Agent details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
        '404':
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'