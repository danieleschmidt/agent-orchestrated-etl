# CI/CD Pipeline Template
# Copy this file to .github/workflows/ci.yml

name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --cov=src/agent_orchestrated_etl --cov-report=xml --cov-report=html
        
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v -m integration

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.8'
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: true

  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.8"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run linting with Ruff
      run: |
        python -m ruff check src/ tests/ --output-format=github

    - name: Check code formatting
      run: |
        python -m ruff format --check src/ tests/

    - name: Run type checking
      run: |
        python -m mypy src/

    - name: Run security checks
      run: |
        python -m bandit -r src/ -f json -o bandit-report.json
        python -m bandit -r src/ # Also show in terminal

    - name: Check code complexity
      run: |
        python -m radon cc src/agent_orchestrated_etl -s -a

  security:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.8"

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install detect-secrets safety bandit

    - name: Run secret detection
      run: |
        detect-secrets scan --all-files --baseline .secrets.baseline

    - name: Run dependency vulnerability check
      run: |
        safety check --json --output safety-report.json
        safety check  # Also show in terminal

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, quality, security]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.8"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: |
        python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, quality, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          your-org/agent-orchestrated-etl:latest
          your-org/agent-orchestrated-etl:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max