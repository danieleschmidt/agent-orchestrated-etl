# Kubernetes deployment for ETL orchestrator
apiVersion: apps/v1
kind: Deployment
metadata:
  name: etl-orchestrator
  namespace: agent-etl
  labels:
    app: etl-orchestrator
    component: orchestrator
    version: v1
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: etl-orchestrator
  template:
    metadata:
      labels:
        app: etl-orchestrator
        component: orchestrator
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: etl-orchestrator
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: orchestrator
        image: agent-orchestrated-etl:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8081
          name: health
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "kubernetes"
        - name: LOG_LEVEL
          value: "INFO"
        - name: METRICS_PORT
          value: "8080"
        - name: HEALTH_PORT
          value: "8081"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: etl-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: etl-secrets
              key: redis-url
        - name: AWS_DEFAULT_REGION
          valueFrom:
            configMapKeyRef:
              name: etl-config
              key: aws-region
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /health
            port: health
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: health
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: config
        configMap:
          name: etl-config
      - name: logs
        emptyDir: {}

---
# ETL Agent Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: etl-agent
  namespace: agent-etl
  labels:
    app: etl-agent
    component: agent
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: etl-agent
  template:
    metadata:
      labels:
        app: etl-agent
        component: agent
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      serviceAccountName: etl-agent
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: agent
        image: agent-orchestrated-etl:latest
        imagePullPolicy: Always
        command: ["python", "-m", "agent_orchestrated_etl.agents.etl_agent"]
        ports:
        - containerPort: 8080
          name: metrics
        - containerPort: 8081
          name: health
        env:
        - name: AGENT_TYPE
          value: "etl"
        - name: AGENT_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: ORCHESTRATOR_URL
          value: "http://etl-orchestrator:8080"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: etl-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: etl-secrets
              key: redis-url
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 300m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /health
            port: health
          initialDelaySeconds: 30
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /ready
            port: health
          initialDelaySeconds: 10
          periodSeconds: 5
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: data
          mountPath: /app/data
      volumes:
      - name: config
        configMap:
          name: etl-config
      - name: data
        emptyDir: {}