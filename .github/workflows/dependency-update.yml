name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  # Security Updates
  security-updates:
    runs-on: ubuntu-latest
    name: Security Updates
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install -e .[dev]
          pip install pip-audit

      - name: Run security audit
        id: audit
        run: |
          pip-audit --format=json --output=audit-report.json || true
          if [ -s audit-report.json ]; then
            echo "vulnerabilities_found=true" >> $GITHUB_OUTPUT
          else
            echo "vulnerabilities_found=false" >> $GITHUB_OUTPUT
          fi

      - name: Create security issue
        if: steps.audit.outputs.vulnerabilities_found == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const auditReport = JSON.parse(fs.readFileSync('audit-report.json', 'utf8'));
            
            let issueBody = '## Security Vulnerabilities Found\n\n';
            issueBody += 'The following security vulnerabilities were detected:\n\n';
            
            auditReport.vulnerabilities.forEach(vuln => {
              issueBody += `### ${vuln.package} (${vuln.installed_version})\n`;
              issueBody += `- **Vulnerability ID**: ${vuln.id}\n`;
              issueBody += `- **Severity**: ${vuln.aliases[0]?.severity || 'Unknown'}\n`;
              issueBody += `- **Fixed Version**: ${vuln.fix_versions?.[0] || 'Not available'}\n`;
              issueBody += `- **Description**: ${vuln.description}\n\n`;
            });
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Security vulnerabilities detected - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: ['security', 'dependencies', 'high-priority']
            });

  # Dependency Updates
  dependency-updates:
    runs-on: ubuntu-latest
    name: Dependency Updates
    strategy:
      matrix:
        update-type: [patch, minor]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install pip-tools
        run: |
          pip install pip-tools pip-review

      - name: Check for updates
        id: check
        run: |
          pip install -e .[dev,vector]
          
          # Generate current requirements
          pip freeze > current-requirements.txt
          
          # Check for outdated packages
          if [ "${{ matrix.update-type }}" == "patch" ]; then
            pip list --outdated --format=json | jq -r '.[] | select(.latest_version | test("^[0-9]+\\.[0-9]+\\.[0-9]+$")) | .name' > patch-updates.txt
          else
            pip list --outdated --format=json | jq -r '.[] | select(.latest_version | test("^[0-9]+\\.[0-9]+")) | .name' > minor-updates.txt
          fi
          
          if [ -s "${{ matrix.update-type }}-updates.txt" ]; then
            echo "updates_available=true" >> $GITHUB_OUTPUT
            echo "Updates available for ${{ matrix.update-type }} releases"
          else
            echo "updates_available=false" >> $GITHUB_OUTPUT
            echo "No ${{ matrix.update-type }} updates available"
          fi

      - name: Create update branch
        if: steps.check.outputs.updates_available == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          BRANCH_NAME="dependency-update-${{ matrix.update-type }}-$(date +%Y%m%d)"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Update dependencies
        if: steps.check.outputs.updates_available == 'true'
        run: |
          # Update specific dependencies based on type
          while IFS= read -r package; do
            if [ -n "$package" ]; then
              echo "Updating $package..."
              pip install --upgrade "$package"
            fi
          done < "${{ matrix.update-type }}-updates.txt"
          
          # Generate new requirements
          pip freeze > updated-requirements.txt

      - name: Run tests with updated dependencies
        if: steps.check.outputs.updates_available == 'true'
        run: |
          pytest tests/unit/ -v --tb=short

      - name: Commit changes
        if: steps.check.outputs.updates_available == 'true'
        run: |
          git add .
          git commit -m "chore: update ${{ matrix.update-type }} dependencies

          Automated dependency update for ${{ matrix.update-type }} releases.
          
          Updated packages:
          $(cat ${{ matrix.update-type }}-updates.txt | sed 's/^/- /')
          
          🤖 Generated by GitHub Actions"

      - name: Push changes
        if: steps.check.outputs.updates_available == 'true'
        run: |
          git push origin $BRANCH_NAME

      - name: Create Pull Request
        if: steps.check.outputs.updates_available == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const updates = fs.readFileSync('${{ matrix.update-type }}-updates.txt', 'utf8')
              .split('\n')
              .filter(line => line.trim())
              .map(pkg => `- ${pkg}`)
              .join('\n');

            const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `chore: update ${{ matrix.update-type }} dependencies`,
              head: process.env.BRANCH_NAME,
              base: 'main',
              body: `## ${{ matrix.update-type }} Dependency Updates

            This PR updates the following ${{ matrix.update-type }} dependencies:

            ${updates}

            ### Changes
            - Automated dependency updates for ${{ matrix.update-type }} releases
            - All tests pass with updated dependencies
            - No breaking changes expected

            ### Testing
            - [x] Unit tests pass
            - [ ] Integration tests pass (run after merge)
            - [ ] Manual testing (if required)

            🤖 This PR was automatically generated by GitHub Actions.
            `,
              labels: ['dependencies', '${{ matrix.update-type }}-update', 'automated']
            });

            console.log('Created PR:', pullRequest.html_url);

  # GitHub Actions Updates
  action-updates:
    runs-on: ubuntu-latest
    name: GitHub Actions Updates
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update GitHub Actions
        uses: technote-space/create-pr-action@v2
        with:
          EXECUTE_COMMANDS: |
            find .github/workflows -name "*.yml" -o -name "*.yaml" | xargs sed -i 's/@v[0-9]\+/@v4/g'
            find .github/workflows -name "*.yml" -o -name "*.yaml" | xargs sed -i 's/node-version: 16/node-version: 18/g'
          COMMIT_MESSAGE: 'chore: update GitHub Actions to latest versions'
          PR_BRANCH_NAME: 'github-actions-updates-${PR_ID}'
          PR_TITLE: 'chore: update GitHub Actions to latest versions'
          PR_BODY: |
            ## GitHub Actions Updates
            
            This PR updates GitHub Actions to their latest versions:
            - Updated action versions to latest stable releases
            - Updated Node.js version to 18 where applicable
            
            🤖 This PR was automatically generated.

  # Pre-commit Hooks Updates
  pre-commit-updates:
    runs-on: ubuntu-latest
    name: Pre-commit Hooks Updates
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Update pre-commit hooks
        run: |
          pre-commit autoupdate

      - name: Create PR for pre-commit updates
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update pre-commit hooks'
          title: 'chore: update pre-commit hooks'
          body: |
            ## Pre-commit Hooks Updates
            
            This PR updates pre-commit hooks to their latest versions.
            
            ### Changes
            - Updated hook versions in `.pre-commit-config.yaml`
            - All hooks tested and working
            
            🤖 This PR was automatically generated.
          branch: pre-commit-hook-updates
          labels: dependencies,pre-commit,automated