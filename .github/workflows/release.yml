# Release Management Workflow
# =============================================================================
# This workflow automates the release process for Agent-Orchestrated-ETL
# Note: This file is created as a template. User needs to review and implement.

name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===========================================================================
  # Validate Release
  # ===========================================================================
  
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          VERSION="${{ github.ref_name }}"
          IS_PRERELEASE="false"
          if [[ "$VERSION" =~ -[a-zA-Z] ]]; then
            IS_PRERELEASE="true"
          fi
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION (prerelease: $IS_PRERELEASE)"

    - name: Validate version format
      run: |
        VERSION=${{ steps.version.outputs.version }}
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+([a-zA-Z0-9\-\.]+)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
          exit 1
        fi
        echo "✅ Version format is valid"

    - name: Check if version exists
      run: |
        VERSION=${{ steps.version.outputs.version }}
        if git tag -l | grep -q "^$VERSION$"; then
          echo "❌ Version $VERSION already exists"
          exit 1
        fi
        echo "✅ Version $VERSION is new"

  # ===========================================================================
  # Run Tests
  # ===========================================================================
  
  test-release:
    name: Test Release
    runs-on: ubuntu-latest
    needs: validate-release

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_agent_etl
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run comprehensive tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_agent_etl
        REDIS_URL: redis://localhost:6379/1

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-release
        path: |
          coverage.xml
          htmlcov/

  # ===========================================================================
  # Build Release Artifacts
  # ===========================================================================
  
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [validate-release, test-release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Update version in pyproject.toml
      run: |
        VERSION=${{ needs.validate-release.outputs.version }}
        VERSION_NUMBER=${VERSION#v}  # Remove 'v' prefix
        sed -i "s/version = \".*\"/version = \"$VERSION_NUMBER\"/" pyproject.toml
        
        echo "Updated version to: $VERSION_NUMBER"
        grep "version =" pyproject.toml

    - name: Build Python packages
      run: |
        python -m build

    - name: Verify built packages
      run: |
        python -m twine check dist/*
        ls -la dist/

    - name: Upload Python packages
      uses: actions/upload-artifact@v3
      with:
        name: python-packages
        path: dist/

  # ===========================================================================
  # Build and Push Docker Images
  # ===========================================================================
  
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [validate-release, test-release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ needs.validate-release.outputs.version }}

    - name: Generate SBOM
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
        format: 'spdx-json'
        output: 'sbom.spdx.json'

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  # ===========================================================================
  # Security Scan
  # ===========================================================================
  
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [validate-release, build-docker]

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Check for critical vulnerabilities
      run: |
        # Fail build if critical vulnerabilities found
        if grep -q '"level": "CRITICAL"' trivy-results.sarif; then
          echo "❌ Critical vulnerabilities found in release image"
          exit 1
        fi
        echo "✅ No critical vulnerabilities found"

  # ===========================================================================
  # Create GitHub Release
  # ===========================================================================
  
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, test-release, build-artifacts, build-docker, security-scan]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate changelog
      id: changelog
      run: |
        VERSION=${{ needs.validate-release.outputs.version }}
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        echo "# Changelog for $VERSION" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## Changes since $PREVIOUS_TAG" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Generate changelog from git commits
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
          
          echo "" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$VERSION" >> CHANGELOG.md
        else
          echo "## Initial Release" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "This is the first release of Agent-Orchestrated-ETL." >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "## Installation" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Python Package" >> CHANGELOG.md
        echo "\`\`\`bash" >> CHANGELOG.md
        echo "pip install agent-orchestrated-etl==${VERSION#v}" >> CHANGELOG.md
        echo "\`\`\`" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Docker Image" >> CHANGELOG.md
        echo "\`\`\`bash" >> CHANGELOG.md
        echo "docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION" >> CHANGELOG.md
        echo "\`\`\`" >> CHANGELOG.md

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        release_name: Release ${{ needs.validate-release.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ needs.validate-release.outputs.is-prerelease == 'true' }}

    - name: Upload Python packages to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: python-packages/
        asset_name: python-packages
        asset_content_type: application/zip

    - name: Upload SBOM to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: sbom/sbom.spdx.json
        asset_name: sbom.spdx.json
        asset_content_type: application/json

  # ===========================================================================
  # Publish to Package Registries
  # ===========================================================================
  
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    environment: pypi

    steps:
    - name: Download Python packages
      uses: actions/download-artifact@v3
      with:
        name: python-packages
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true

  # ===========================================================================
  # Update Documentation
  # ===========================================================================
  
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install documentation dependencies
      run: |
        pip install mkdocs mkdocs-material

    - name: Update version in documentation
      run: |
        VERSION=${{ needs.validate-release.outputs.version }}
        # Update version references in documentation
        find docs/ -name "*.md" -exec sed -i "s/version: [0-9]\+\.[0-9]\+\.[0-9]\+/version: ${VERSION#v}/g" {} \;

    - name: Build and deploy documentation
      run: |
        mkdocs gh-deploy --force

  # ===========================================================================
  # Post-Release Actions
  # ===========================================================================
  
  post-release:
    name: Post-Release Actions
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, publish-pypi]
    if: always() && needs.create-release.result == 'success'

    steps:
    - name: Send release notification
      uses: actions/github-script@v6
      with:
        script: |
          const version = "${{ needs.validate-release.outputs.version }}";
          const isPrerelease = "${{ needs.validate-release.outputs.is-prerelease }}" === "true";
          
          // Create announcement issue
          const title = `🚀 Release ${version} Published`;
          const body = `
          ## Release ${version} is now available!
          
          ### What's new
          - Check the [release notes](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${version})
          - View the [changelog](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/CHANGELOG.md)
          
          ### Installation
          \`\`\`bash
          pip install agent-orchestrated-etl==${version.replace('v', '')}
          \`\`\`
          
          ### Docker
          \`\`\`bash
          docker pull ghcr.io/${context.repo.owner}/${context.repo.repo}:${version}
          \`\`\`
          
          ${isPrerelease ? '⚠️ This is a pre-release version.' : ''}
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['release', 'announcement']
          });

    - name: Update metrics
      run: |
        # Update project metrics
        echo "Recording release metrics..."
        # Add actual metrics recording logic here

    - name: Trigger downstream updates
      run: |
        # Trigger updates in dependent projects
        echo "Triggering downstream updates..."
        # Add repository dispatch or webhook calls here

  # ===========================================================================
  # Rollback on Failure
  # ===========================================================================
  
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, publish-pypi]
    if: failure()

    steps:
    - name: Delete GitHub release on failure
      if: needs.create-release.result == 'success'
      uses: actions/github-script@v6
      with:
        script: |
          const version = "${{ needs.validate-release.outputs.version }}";
          
          try {
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: version
            });
            
            await github.rest.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id
            });
            
            console.log(`Deleted release ${version}`);
          } catch (error) {
            console.log(`Could not delete release: ${error.message}`);
          }

    - name: Create failure notification
      uses: actions/github-script@v6
      with:
        script: |
          const version = "${{ needs.validate-release.outputs.version }}";
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `❌ Release ${version} Failed`,
            body: `The release process for version ${version} has failed. Please check the workflow logs and try again.`,
            labels: ['release', 'failure', 'high-priority']
          });