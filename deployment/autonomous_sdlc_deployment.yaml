# Autonomous SDLC Production Deployment Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: autonomous-sdlc-config
  namespace: terragon-pipelines
data:
  # Core System Configuration
  automation_level: "autonomous"
  max_concurrent_pipelines: "20"
  pipeline_retention_days: "30"
  workspace_path: "/data/autonomous_pipelines"
  
  # Monitoring Configuration
  monitoring_interval_seconds: "60"
  health_check_timeout_seconds: "30"
  alert_cooldown_seconds: "300"
  max_metrics_per_series: "10000"
  
  # Scaling Configuration
  auto_scaling_enabled: "true"
  min_workers: "2"
  max_workers: "100"
  scaling_cooldown_seconds: "300"
  target_cpu_utilization: "75"
  target_memory_utilization: "80"
  
  # Resource Limits
  default_cpu_cores: "4"
  default_memory_gb: "8"
  default_storage_gb: "100"
  max_cpu_cores: "64"
  max_memory_gb: "256"
  max_storage_gb: "1000"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: autonomous-pipeline-manager
  namespace: terragon-pipelines
  labels:
    app: autonomous-pipeline-manager
    version: v1.0.0
    component: core
spec:
  replicas: 3  # High availability
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: autonomous-pipeline-manager
  template:
    metadata:
      labels:
        app: autonomous-pipeline-manager
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: autonomous-pipeline-manager
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: pipeline-manager
        image: terragon/autonomous-pipeline-manager:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8081
          name: metrics
          protocol: TCP
        env:
        - name: TERRAGON_ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: WORKSPACE_PATH
          value: "/data/autonomous_pipelines"
        - name: AUTOMATION_LEVEL
          valueFrom:
            configMapKeyRef:
              name: autonomous-sdlc-config
              key: automation_level
        - name: MAX_CONCURRENT_PIPELINES
          valueFrom:
            configMapKeyRef:
              name: autonomous-sdlc-config
              key: max_concurrent_pipelines
        - name: POSTGRES_HOST
          valueFrom:
            secretKeyRef:
              name: autonomous-sdlc-secrets
              key: postgres-host
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: autonomous-sdlc-secrets
              key: postgres-password
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: autonomous-sdlc-secrets
              key: aws-access-key-id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: autonomous-sdlc-secrets
              key: aws-secret-access-key
        resources:
          requests:
            cpu: 1000m
            memory: 2Gi
            ephemeral-storage: 1Gi
          limits:
            cpu: 4000m
            memory: 8Gi
            ephemeral-storage: 5Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /startup
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 12
        volumeMounts:
        - name: workspace-volume
          mountPath: /data/autonomous_pipelines
        - name: config-volume
          mountPath: /etc/config
          readOnly: true
        - name: secrets-volume
          mountPath: /etc/secrets
          readOnly: true
      volumes:
      - name: workspace-volume
        persistentVolumeClaim:
          claimName: autonomous-workspace-pvc
      - name: config-volume
        configMap:
          name: autonomous-sdlc-config
      - name: secrets-volume
        secret:
          secretName: autonomous-sdlc-secrets
          defaultMode: 0400

---
apiVersion: v1
kind: Service
metadata:
  name: autonomous-pipeline-manager-service
  namespace: terragon-pipelines
  labels:
    app: autonomous-pipeline-manager
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 8081
    targetPort: 8081
    protocol: TCP
    name: metrics
  selector:
    app: autonomous-pipeline-manager

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: autonomous-workspace-pvc
  namespace: terragon-pipelines
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: aws-efs

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: autonomous-pipeline-manager-hpa
  namespace: terragon-pipelines
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: autonomous-pipeline-manager
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: pipeline_queue_depth
      target:
        type: AverageValue
        averageValue: "10"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 600
      policies:
      - type: Percent
        value: 25
        periodSeconds: 120

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: autonomous-pipeline-manager-netpol
  namespace: terragon-pipelines
spec:
  podSelector:
    matchLabels:
      app: autonomous-pipeline-manager
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: autonomous-pipeline-manager
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8081
  egress:
  - to: []  # Allow all outbound traffic
    ports:
    - protocol: TCP
      port: 443  # HTTPS
    - protocol: TCP
      port: 5432 # PostgreSQL
    - protocol: TCP
      port: 6379 # Redis
    - protocol: UDP
      port: 53   # DNS

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: autonomous-pipeline-manager
  namespace: terragon-pipelines
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT-ID:role/autonomous-pipeline-manager-role

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: terragon-pipelines
  name: autonomous-pipeline-manager-role
rules:
- apiGroups: [""]
  resources: ["pods", "configmaps", "secrets", "persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: autonomous-pipeline-manager-binding
  namespace: terragon-pipelines
subjects:
- kind: ServiceAccount
  name: autonomous-pipeline-manager
  namespace: terragon-pipelines
roleRef:
  kind: Role
  name: autonomous-pipeline-manager-role
  apiGroup: rbac.authorization.k8s.io

---
# Monitoring Stack Integration
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: autonomous-pipeline-manager-monitor
  namespace: terragon-pipelines
  labels:
    app: autonomous-pipeline-manager
    release: prometheus
spec:
  selector:
    matchLabels:
      app: autonomous-pipeline-manager
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
    honorLabels: true

---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: autonomous-pipeline-manager-alerts
  namespace: terragon-pipelines
  labels:
    app: autonomous-pipeline-manager
    release: prometheus
spec:
  groups:
  - name: autonomous_pipeline_manager
    rules:
    - alert: AutonomousPipelineManagerDown
      expr: up{job="autonomous-pipeline-manager-service"} == 0
      for: 5m
      labels:
        severity: critical
      annotations:
        summary: "Autonomous Pipeline Manager is down"
        description: "Autonomous Pipeline Manager has been down for more than 5 minutes"
    
    - alert: HighPipelineErrorRate
      expr: rate(pipeline_errors_total[5m]) > 0.1
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "High pipeline error rate detected"
        description: "Pipeline error rate is {{ $value }} errors per second"
    
    - alert: PipelineQueueDepthHigh
      expr: pipeline_queue_depth > 100
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "Pipeline queue depth is high"
        description: "Pipeline queue depth is {{ $value }}, indicating potential bottleneck"
    
    - alert: AutonomousSystemResourceExhaustion
      expr: (container_memory_usage_bytes / container_spec_memory_limit_bytes) > 0.9
      for: 5m
      labels:
        severity: critical
      annotations:
        summary: "High memory usage in autonomous system"
        description: "Memory usage is {{ $value | humanizePercentage }} of limit"

---
# Security Policies
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: autonomous-pipeline-manager-psp
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'

---
# Backup Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: autonomous-backup-config
  namespace: terragon-pipelines
data:
  backup_schedule: "0 2 * * *"  # Daily at 2 AM
  retention_days: "30"
  s3_bucket: "terragon-autonomous-backups"
  backup_script: |
    #!/bin/bash
    set -e
    
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    BACKUP_DIR="/tmp/backup_${TIMESTAMP}"
    
    echo "Starting backup at ${TIMESTAMP}"
    
    # Create backup directory
    mkdir -p ${BACKUP_DIR}
    
    # Backup workspace data
    tar -czf ${BACKUP_DIR}/workspace_${TIMESTAMP}.tar.gz /data/autonomous_pipelines/
    
    # Backup database (PostgreSQL)
    pg_dump -h $POSTGRES_HOST -U $POSTGRES_USER $POSTGRES_DB | gzip > ${BACKUP_DIR}/database_${TIMESTAMP}.sql.gz
    
    # Upload to S3
    aws s3 cp ${BACKUP_DIR} s3://${S3_BUCKET}/backups/${TIMESTAMP}/ --recursive
    
    # Cleanup local backup
    rm -rf ${BACKUP_DIR}
    
    echo "Backup completed successfully"

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: autonomous-backup-job
  namespace: terragon-pipelines
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM UTC
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: autonomous-pipeline-manager
          containers:
          - name: backup
            image: terragon/backup-tools:v1.0.0
            command: ["/bin/bash"]
            args: ["/etc/backup/backup_script"]
            env:
            - name: POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  name: autonomous-sdlc-secrets
                  key: postgres-host
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: autonomous-sdlc-secrets
                  key: postgres-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: autonomous-sdlc-secrets
                  key: postgres-password
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: autonomous-sdlc-secrets
                  key: postgres-database
            - name: S3_BUCKET
              valueFrom:
                configMapKeyRef:
                  name: autonomous-backup-config
                  key: s3_bucket
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: autonomous-sdlc-secrets
                  key: aws-access-key-id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: autonomous-sdlc-secrets
                  key: aws-secret-access-key
            volumeMounts:
            - name: workspace-volume
              mountPath: /data/autonomous_pipelines
              readOnly: true
            - name: backup-script
              mountPath: /etc/backup
              readOnly: true
            resources:
              requests:
                cpu: 200m
                memory: 512Mi
              limits:
                cpu: 1000m
                memory: 2Gi
          volumes:
          - name: workspace-volume
            persistentVolumeClaim:
              claimName: autonomous-workspace-pvc
          - name: backup-script
            configMap:
              name: autonomous-backup-config
              items:
              - key: backup_script
                path: backup_script
                mode: 0755
          restartPolicy: OnFailure
          
---
# Disaster Recovery Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: disaster-recovery-config
  namespace: terragon-pipelines
data:
  recovery_rto: "4h"  # Recovery Time Objective
  recovery_rpo: "1h"  # Recovery Point Objective
  backup_regions: "us-west-2,eu-west-1"
  emergency_contacts: "ops-team@terragon.com,cto@terragon.com"
  escalation_policy: |
    Level 1 (0-30min): Automatic recovery attempts
    Level 2 (30-60min): On-call engineer notification
    Level 3 (60-120min): Engineering manager notification
    Level 4 (120-240min): Executive escalation