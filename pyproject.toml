[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"

[project]
name = "agent_orchestrated_etl"
version = "0.0.1"
requires-python = ">=3.8"
dependencies = [
    "PyYAML>=6.0",
    "watchdog>=3.0.0",
    "langchain>=0.1.0",
    "langchain-core>=0.1.0",
    "langchain-community>=0.0.20",
    "pydantic>=2.0.0",
    "tiktoken>=0.5.0",
    "boto3>=1.26.0",
    "pandas>=1.5.0",
    "pyarrow>=10.0.0",
    "sqlalchemy>=2.0.0",
    "psutil>=5.9.0",
    "aiohttp>=3.8.0",
]

[tool.setuptools]
package-dir = {"" = "src"}
packages = ["agent_orchestrated_etl"]

[project.scripts]
generate_dag = "agent_orchestrated_etl.cli:main"
run_pipeline = "agent_orchestrated_etl.cli:run_pipeline_cmd"

[project.optional-dependencies]
dev = [
    "pytest==8.4.1",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.2.0",
    "ruff==0.12.1",
    "black>=23.0.0",
    "isort>=5.12.0",
    "Pygments==2.19.2",
    "pre-commit==3.7.0",
    "detect-secrets==1.4.0",
    "coverage==7.9.1",
    "radon==6.0.1",
    "bandit==1.7.10",
    "safety==3.2.9",
    "mypy==1.11.2",
    "pydocstyle==6.3.0",
    "types-PyYAML==6.0.12.20241230",
    "types-requests>=2.32.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
    "interrogate>=1.5.0",
    "vulture>=2.7",
]
vector = [
    "chromadb>=0.4.0",
    "sentence-transformers>=2.2.0",
    "numpy>=1.21.0",
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
markers = [
    "asyncio: mark test as async",
    "slow: mark test as slow",
    "integration: mark test as integration test",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "scripts/*",
    "*/__pycache__/*",
    "*/migrations/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "langchain.*",
    "langchain_core.*",
    "langchain_community.*",
    "tiktoken.*",
    "boto3.*",
    "botocore.*",
    "pyarrow.*",
    "watchdog.*",
    "psutil.*"
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.ruff.isort]
known-first-party = ["agent_orchestrated_etl"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]
