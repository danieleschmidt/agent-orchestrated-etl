[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"

[project]
name = "agent_orchestrated_etl"
version = "0.0.1"
requires-python = ">=3.8"
dependencies = [
    "PyYAML>=6.0",
    "watchdog>=3.0.0",
    "langchain>=0.1.0",
    "langchain-core>=0.1.0",
    "langchain-community>=0.0.20",
    "pydantic>=2.0.0",
    "tiktoken>=0.5.0",
    "boto3>=1.26.0",
    "pandas>=1.5.0",
    "pyarrow>=10.0.0",
    "sqlalchemy>=2.0.0",
    "psutil>=5.9.0",
    "aiohttp>=3.8.0",
]

[tool.setuptools]
package-dir = {"" = "src"}
packages = ["agent_orchestrated_etl"]

[project.scripts]
generate_dag = "agent_orchestrated_etl.cli:main"
run_pipeline = "agent_orchestrated_etl.cli:run_pipeline_cmd"

# Development and maintenance scripts
[tool.scripts]
dev = "python -m uvicorn src.agent_orchestrated_etl.api:app --reload --host 0.0.0.0 --port 8000"
test = "pytest -v --tb=short --cov=src/agent_orchestrated_etl --cov-report=html --cov-report=term"
test-watch = "pytest-watch --runner 'pytest -v --tb=short'"
lint = "ruff check src/ tests/ --fix"
format = "ruff format src/ tests/"
typecheck = "mypy src/ tests/"
security = "bandit -r src/ -f json -o security-report.json"
quality = "radon cc src/agent_orchestrated_etl -s -a"
clean = "find . -type d -name '__pycache__' -exec rm -rf {} + && find . -name '*.pyc' -delete && find . -name '*.pyo' -delete"
docs = "mkdocs serve"
build = "python -m build"
install-dev = "pip install -e .[dev,vector]"
setup-pre-commit = "pre-commit install && pre-commit install --hook-type commit-msg"

[project.optional-dependencies]
dev = [
    "pytest==8.4.1",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-env>=0.8.0",
    "pytest-timeout>=2.1.0",
    "pytest-html>=3.1.0",
    "httpx>=0.24.0",
    "ruff==0.12.1",
    "Pygments==2.19.2",
    "pre-commit==3.7.0",
    "detect-secrets==1.4.0",
    "coverage==7.9.1",
    "radon==6.0.1",
    "bandit==1.7.10",
    "safety==3.2.9",
    "mypy==1.11.2",
    "pydocstyle==6.3.0",
    "types-PyYAML==6.0.12.20241230",
    "types-requests>=2.32.0",
    "factory-boy>=3.2.0",
    "freezegun>=1.2.0",
    "responses>=0.23.0",
    "testcontainers>=3.7.0",
]
vector = [
    "chromadb>=0.4.0",
    "sentence-transformers>=2.2.0",
    "numpy>=1.21.0",
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
markers = [
    "asyncio: mark test as async",
    "slow: mark test as slow (deselect with '-m \"not slow\"')",
    "integration: mark test as integration test",
    "unit: mark test as unit test",
    "e2e: mark test as end-to-end test",
    "performance: mark test as performance test",
    "security: mark test as security test",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--cov=src/agent_orchestrated_etl",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--timeout=300",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
env = [
    "ENVIRONMENT=test",
    "LOG_LEVEL=WARNING",
]

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-argument
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q",  # flake8-quotes
    "N",  # pep8-naming
    "S",  # flake8-bandit
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected
    "S608",  # possible SQL injection vector through string-based query construction
    "TCH001", # Move application import into TYPE_CHECKING block
    "TCH002", # Move third-party import into TYPE_CHECKING block
    "TCH003", # Move standard library import into TYPE_CHECKING block
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.isort]
known-first-party = ["agent_orchestrated_etl"]
force-single-line = false

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "ARG001", "S106"]
"scripts/*" = ["S101"]

[tool.mypy]
python_version = "3.8"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = [
    "airflow.*",
    "langchain.*",
    "chromadb.*",
    "sentence_transformers.*",
    "boto3.*",
    "botocore.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]

[tool.pydocstyle]
convention = "google"
add_ignore = ["D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107"]
