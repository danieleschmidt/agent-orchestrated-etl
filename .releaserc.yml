# Semantic Release Configuration
# =============================================================================

# Branch configuration
branches:
  - name: main
    prerelease: false
  - name: develop
    prerelease: beta
  - name: release/+([0-9])?(.{+([0-9]),x}).x
    prerelease: rc

# Plugins configuration
plugins:
  # Analyze commits to determine release type
  - "@semantic-release/commit-analyzer":
      preset: "conventionalcommits"
      releaseRules:
        - type: "feat"
          release: "minor"
        - type: "fix"
          release: "patch"
        - type: "perf"
          release: "patch"
        - type: "revert"
          release: "patch"
        - type: "docs"
          release: false
        - type: "style"
          release: false
        - type: "chore"
          release: false
        - type: "refactor"
          release: "patch"
        - type: "test"
          release: false
        - type: "build"
          release: "patch"
        - type: "ci"
          release: false
        - scope: "breaking"
          release: "major"
      parserOpts:
        noteKeywords:
          - "BREAKING CHANGE"
          - "BREAKING CHANGES"

  # Generate release notes
  - "@semantic-release/release-notes-generator":
      preset: "conventionalcommits"
      parserOpts:
        noteKeywords:
          - "BREAKING CHANGE"
          - "BREAKING CHANGES"
      writerOpts:
        commitsSort:
          - "subject"
          - "scope"
      presetConfig:
        types:
          - type: "feat"
            section: "üöÄ Features"
          - type: "fix"
            section: "üêõ Bug Fixes"
          - type: "perf"
            section: "‚ö° Performance Improvements"
          - type: "revert"
            section: "‚è™ Reverts"
          - type: "docs"
            section: "üìö Documentation"
            hidden: false
          - type: "style"
            section: "üíÑ Styles"
            hidden: true
          - type: "chore"
            section: "üîß Maintenance"
            hidden: true
          - type: "refactor"
            section: "‚ôªÔ∏è Code Refactoring"
          - type: "test"
            section: "‚úÖ Tests"
            hidden: true
          - type: "build"
            section: "üèóÔ∏è Build System"
          - type: "ci"
            section: "üë∑ CI/CD"
            hidden: true

  # Update version in package files
  - "@semantic-release/changelog":
      changelogFile: "CHANGELOG.md"
      changelogTitle: "# Changelog\n\nAll notable changes to this project will be documented in this file."

  # Update version in pyproject.toml
  - "@semantic-release/exec":
      prepareCmd: |
        python -c "
        import re
        with open('pyproject.toml', 'r') as f:
            content = f.read()
        content = re.sub(r'version = \".*\"', f'version = \"{nextRelease.version}\"', content)
        with open('pyproject.toml', 'w') as f:
            f.write(content)
        "
      publishCmd: |
        # Build and publish Python package
        python -m build
        # python -m twine upload dist/*  # Uncomment when ready to publish

  # Update version in package.json
  - "@semantic-release/npm":
      npmPublish: false  # We're not publishing to npm

  # Build and tag Docker images
  - "@semantic-release/exec":
      publishCmd: |
        # Build production Docker image
        docker build -t agent-orchestrated-etl:${nextRelease.version} --target production .
        docker build -t agent-orchestrated-etl:latest --target production .
        
        # Tag for container registry
        docker tag agent-orchestrated-etl:${nextRelease.version} ghcr.io/terragon-labs/agent-orchestrated-etl:${nextRelease.version}
        docker tag agent-orchestrated-etl:latest ghcr.io/terragon-labs/agent-orchestrated-etl:latest
        
        # Push to registry (uncomment when ready)
        # docker push ghcr.io/terragon-labs/agent-orchestrated-etl:${nextRelease.version}
        # docker push ghcr.io/terragon-labs/agent-orchestrated-etl:latest

  # Create GitHub release
  - "@semantic-release/github":
      assets:
        - path: "dist/*.tar.gz"
          label: "Python Distribution (tar.gz)"
        - path: "dist/*.whl"
          label: "Python Distribution (wheel)"
        - path: "sbom/*.json"
          label: "Software Bill of Materials"
        - path: "docs/deployment/production-deployment.md"
          label: "Production Deployment Guide"
      failComment: false
      failTitle: false
      successComment: |
        :tada: This release is now available!
        
        ## Release Notes
        ${nextRelease.notes}
        
        ## Docker Images
        - `agent-orchestrated-etl:${nextRelease.version}`
        - `ghcr.io/terragon-labs/agent-orchestrated-etl:${nextRelease.version}`
        
        ## Installation
        ```bash
        # Docker
        docker pull ghcr.io/terragon-labs/agent-orchestrated-etl:${nextRelease.version}
        
        # Python
        pip install agent-orchestrated-etl==${nextRelease.version}
        ```

  # Commit updated files
  - "@semantic-release/git":
      assets:
        - "CHANGELOG.md"
        - "pyproject.toml"
        - "package.json"
        - "package-lock.json"
      message: "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"

# Git tag format
tagFormat: "v${version}"

# Repository URL
repositoryUrl: "https://github.com/terragon-labs/agent-orchestrated-etl"

# Release configuration
preset: "conventionalcommits"

# Dry run for testing (set to false in production)
dryRun: false

# Debug mode
debug: false